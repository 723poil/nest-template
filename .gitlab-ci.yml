cache:
  paths:
    - node_modules/
    - dist/
    - package-lock.json

variables:
  MODE: ""
  DOMAIN: ""

stages:
  - lint
  - test
  - build
  - deploy

############ LINT ########################################################################################################
lint:
  image: node:20.11.0
  stage: lint
  script: 
    - npm install
    - npm run lint
  environment: dev
  tags:
    - local
############ LINT ########################################################################################################


# DEV ####################################################################################################################

# DEV ###### TEST ########################################################################################################
test:
  image: docker:latest
  stage: test
  services:
    - docker:dind
  needs:
    - job: lint
      optional: true
  before_script:
    - apk update
    - apk add nodejs npm

    # Check node and npm versions
    - node -v
    - npm -v

    - apk add netcat-openbsd

    - apk add --no-cache curl py-pip
    - apk add docker-compose
    - MODE=dev

    - touch ${MODE}.env
    - echo "DB_URL=mysql://${DEV_DB_USER}:${DEV_DB_PASSWORD}@${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_DB_SCHEMA}"   >> ./${MODE}.env

    - touch test.env
    - echo "DB_USER=root"                                                                                      >> ./test.env
    - echo "DB_PASSWORD=test"                                                                                  >> ./test.env
    - echo "DB_PORT=3307"                                                                                      >> ./test.env
    - echo "DB_HOST=host.docker.internal"                                                                      >> ./test.env
    - echo "DB_SCHEMA=${DEV_DB_SCHEMA}"                                                                        >> ./test.env
    - echo "DB_URL=mysql://root:test@host.docker.internal:3307/${DEV_DB_SCHEMA}"                               >> ./test.env
  script:
    - npm install
    - npm install -g ts-node

    - echo "START TEST"
    - chmod +x ./script/test.sh
    - npm run test:dev
    - echo "END TEST"
  after_script:
    - docker-compose -f docker-compose.test.yml down
  environment: dev
  only:
    - dev
    - develop
  tags:
    - local
# DEV ###### TEST ########################################################################################################

# DEV ###### BUILD #######################################################################################################
nest-build:
  image: node:20.11.0
  stage: build
  needs:
    - job: test
      optional: true
  before_script:
    - MODE=dev
    
    - touch ${MODE}.env
    - echo "DB_URL=mysql://${DEV_DB_USER}:${DEV_DB_PASSWORD}@${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_DB_SCHEMA}"   >> ./${MODE}.env
  script:
    - echo $CI_COMMIT_BRANCH
    - npm install
    - npm install -g ts-node

    - ts-node prisma/generate.db.schema.js && npx dotenv -e ${MODE}.env -- npx prisma db pull --schema=prisma/db.schema.prisma
    - npm run prisma:generate
    - npm run build
  environment: dev
  only:
    - dev
  tags:
    - local
# DEV ###### BUILD #######################################################################################################

# DEV ###### DOCKER BUILD ################################################################################################
dev-docker-build:
  image: docker:latest
  stage: build
  needs:
    - job: nest-build
      optional: true
  services:
    - docker:dind
  before_script:
    - MODE=dev
    - DOMAIN=fnb

    - CUR_DATE=$(echo $CI_PIPELINE_CREATED_AT | sed -r 's/[T]+/ /g' | sed -r 's/[Z]+//g; s/ //g; s/://g; s/-//g')
    - echo $CUR_DATE
      
    - touch ${MODE}.env
    - echo "DB_USER=${DEV_DB_USER}"                                                                            >> ./${MODE}.env
    - echo "DB_PASSWORD=${DEV_DB_PASSWORD}"                                                                    >> ./${MODE}.env
    - echo "DB_PORT=${DEV_DB_PORT}"                                                                            >> ./${MODE}.env
    - echo "DB_HOST=${DEV_DB_HOST}"                                                                            >> ./${MODE}.env
    - echo "DB_SCHEMA=${DEV_DB_SCHEMA}"                                                                        >> ./${MODE}.env
    - echo "DB_URL=mysql://${DEV_DB_USER}:${DEV_DB_PASSWORD}@${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_DB_SCHEMA}"   >> ./${MODE}.env
    - echo "SWAGGER_PWD=${SWAGGER_PWD}"                                                                        >> ./${MODE}.env

    - docker login -u "$CI_DOCKER_REGISTRY_USER" -p "$CI_DOCKER_REGISTRY_PASSWORD" $CI_DOCKER_REGISTRY
  script:
    - docker pull node:20-alpine || true
    - docker build
      --tag $CI_DOCKER_REGISTRY/${MODE}-nest-${DOMAIN}:${CUR_DATE}
      --tag $CI_DOCKER_REGISTRY/${MODE}-nest-${DOMAIN}:latest 
      --build-arg MODE=${MODE} 
      --build-arg DOMAIN=${DOMAIN}
      -f Dockerfile . 
    - docker push $CI_DOCKER_REGISTRY/${MODE}-nest-${DOMAIN}
    - docker push $CI_DOCKER_REGISTRY/${MODE}-nest-${DOMAIN}:${CUR_DATE}
  after_script: 
    - docker image prune -a -f
  environment: dev
  only:
    - dev
  tags:
    - local
# DEV ###### DOCKER BUILD ################################################################################################

# DEV ###### DEPLOY ######################################################################################################
dev-deploy:
  image: kroniak/ssh-client
  stage: deploy
  needs:
    - job: dev-docker-build
      optional: true
  before_script:
    - MODE=dev
    - DOMAIN=fnb
    - DOMAIN_PORT=$DEV_PORT
    - DOMAIN_LOG_PATH=$DEV_LOG_PATH

    - touch .env
    - echo "DOMAIN=${DOMAIN}"                                       >> ./.env
    - echo "MODE=${MODE}"                                           >> ./.env
    - echo "BLUE_PORT=${DOMAIN_PORT}"                               >> ./.env
    - echo "GREEN_PORT=1${DOMAIN_PORT}"                             >> ./.env
    - echo "DOMAIN_LOG_PATH=${DOMAIN_LOG_PATH}"                     >> ./.env
    - echo "DEV_RES_PATH=${DEV_RES_PATH}"                           >> ./.env
    - echo "CI_DOCKER_REGISTRY=${CI_DOCKER_REGISTRY}"               >> ./.env

    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s) 
    - ssh-add <(echo "${DEV_SSH_KEY}")
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - scp
        "./.env"
        "./docker-compose.${DOMAIN}.yml"
        "./script/deploy.sh"
        ${DEV_SERVER_USER_NAME}@${DEV_SERVER_HOST}:${DOCKER_PATH}/${DOMAIN}

    - ssh ${DEV_SERVER_USER_NAME}@${DEV_SERVER_HOST} 
      "docker login -u "${CI_DOCKER_REGISTRY_USER}" -p "${CI_DOCKER_REGISTRY_PASSWORD}" ${CI_DOCKER_REGISTRY} &&
      docker pull ${CI_DOCKER_REGISTRY}/${MODE}-nest-${DOMAIN}:latest"

    - ssh ${DEV_SERVER_USER_NAME}@${DEV_SERVER_HOST}
      "cd ${DOCKER_PATH}/${DOMAIN} &&
      chmod +x deploy.sh && 
      ./deploy.sh"
  environment: dev
  only:
    - dev
  tags:
    - local
# DEV ###### DEPLOY ######################################################################################################
# DEV ####################################################################################################################